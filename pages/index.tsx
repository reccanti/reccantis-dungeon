import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import { useEffect, useState } from "react";

/**
 * Utlities
 */

/**
 * Print the maze
 */
// function printMaze(maze: Maze): string {
//   const getNextInRow = (cell: number) => {
//     const hasNext = (cell + 1) % maze.width > 0;
//     return hasNext ? cell + 1 : null;
//   };
//   const getCellAbove = (cell: number) => {
//     const hasAbove = cell - maze.width >= 0;
//     return hasAbove ? cell - maze.width : null;
//   };

//   const generateGrid = () => {
//     const solidRow = "#".repeat(maze.width * 2 + 1);
//     const innerGrid = "#" + " #".repeat(maze.width);
//     return solidRow + ("\n" + innerGrid + "\n" + solidRow).repeat(maze.height);
//   };

//   const cellToIndex = (cell: number) => {
//     const row = Math.floor(cell / maze.width);
//     const col = cell % maze.width;
//     return (
//       col * 2 + (maze.width * 2 + 3) * (row + 1) + (maze.width * 2 + 1) * row
//     );
//   };

//   const wallAboveIndex = (cell: number) => {
//     const i = cellToIndex(cell);
//     return i - maze.width * 2 - 2;
//   };

//   const wallNextIndex = (cell: number) => {
//     const i = cellToIndex(cell);
//     return i + 1;
//   };

//   const numRooms = maze.width * maze.height;
//   const cells = Array.from({ length: numRooms }, (_, i) => i);

//   let grid = generateGrid();
//   cells.forEach((cell) => {
//     const next = getNextInRow(cell);
//     const above = getCellAbove(cell);

//     if (next !== null && !maze.hasWall(cell, next)) {
//       const i = wallNextIndex(cell);
//       grid = grid.substring(0, i) + " " + grid.substring(i + 1);
//     }

//     if (above !== null && !maze.hasWall(cell, above)) {
//       const i = wallAboveIndex(cell);
//       grid = grid.substring(0, i) + " " + grid.substring(i + 1);
//     }
//   });

//   return grid;
// }

/**
 * The Page
 */

const Home: NextPage = () => {
  // const [maze, setMaze] = useState<Maze | null>(null);

  // useEffect(() => {
  //   setMaze(new Maze(25, 25));
  // }, []);

  // const handleClick = () => {
  //   setMaze(new Maze(25, 25));
  // };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div
          style={{
            position: "relative",
            perspective: "600px",
          }}
        >
          <div
            style={{
              width: "100px",
              height: "100px",
              backgroundColor: "red",
              transformStyle: "preserve-3d",
              transform: "translateY(50px) rotateX(90deg) translateZ(100px)",
            }}
          ></div>
        </div>
        {/* {maze && (
          <pre>
            {printMaze(maze)
              .split("\n")
              .map((row, i) => (
                <div key={i}>
                  {row.split("").map((char, i) => (
                    <span
                      key={i}
                      style={{
                        height: "0.75rem",
                        width: "0.75rem",
                        display: "inline-block",
                      }}
                    >
                      {char}
                    </span>
                  ))}
                </div>
              ))}
          </pre>
        )} */}
        {/* <button onClick={handleClick}>Regenerate</button> */}
      </main>
    </div>
  );
};

export default Home;
